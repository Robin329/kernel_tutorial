From f5ef5e20e4a199459d276ca9bfe963395195649a Mon Sep 17 00:00:00 2001
From: "Robin.J" <jiangrenbin329@gmail.com>
Date: Fri, 1 May 2020 17:04:07 +0000
Subject: [PATCH] Robin: Add robin driver.

Signed-off-by: Robin.J <jiangrenbin329@gmail.com>
---
 drivers/Kconfig                       |   2 +-
 drivers/Makefile                      |   2 +-
 drivers/robin/Kconfig                 |  24 ++++++++
 drivers/robin/Makefile                |   4 ++
 drivers/robin/slub_test/Kconfig       |   4 ++
 drivers/robin/slub_test/Makefile      |   2 +
 drivers/robin/slub_test/slub_test.c   |  31 ++++++++++
 drivers/robin/test_trace/Kconfig      |   4 ++
 drivers/robin/test_trace/Makefile     |   2 +
 drivers/robin/test_trace/test_trace.c | 104 ++++++++++++++++++++++++++++++++++
 drivers/robin/test_trace/test_trace.h |  11 ++++
 drivers/tty/serial/serial_core.c      |   2 +-
 include/trace/events/trace_test.h     |  41 ++++++++++++++
 init/main.c                           |   2 +-
 14 files changed, 231 insertions(+), 4 deletions(-)
 create mode 100644 drivers/robin/Kconfig
 create mode 100644 drivers/robin/Makefile
 create mode 100644 drivers/robin/slub_test/Kconfig
 create mode 100644 drivers/robin/slub_test/Makefile
 create mode 100644 drivers/robin/slub_test/slub_test.c
 create mode 100644 drivers/robin/test_trace/Kconfig
 create mode 100644 drivers/robin/test_trace/Makefile
 create mode 100644 drivers/robin/test_trace/test_trace.c
 create mode 100644 drivers/robin/test_trace/test_trace.h
 create mode 100644 include/trace/events/trace_test.h

diff --git a/drivers/Kconfig b/drivers/Kconfig
index 61cf4ea..dfffe39 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -2,7 +2,7 @@
 menu "Device Drivers"
 
 # Keep I/O buses first
-
+source "drivers/robin/Kconfig"
 source "drivers/amba/Kconfig"
 source "drivers/eisa/Kconfig"
 source "drivers/pci/Kconfig"
diff --git a/drivers/Makefile b/drivers/Makefile
index 6d37564..3078c13 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -5,7 +5,7 @@
 # 15 Sep 2000, Christoph Hellwig <hch@infradead.org>
 # Rewritten to use lists instead of if-statements.
 #
-
+obj-y				+= robin/
 obj-y				+= irqchip/
 obj-y				+= bus/
 
diff --git a/drivers/robin/Kconfig b/drivers/robin/Kconfig
new file mode 100644
index 00000000..8f8df11
--- /dev/null
+++ b/drivers/robin/Kconfig
@@ -0,0 +1,24 @@
+# SPDX-License-Identifier: GPL-2.0-only
+menu "Robin"
+
+config ROBIN
+    bool "Robin Driver"
+    ---help---
+      This is a Robin Driver demo, and enabled it to start Robin Driver.
+
+if ROBIN
+
+config ROBIN_TRACE
+    bool "Robin Trace"
+    default y
+    ---help---
+      Robin Trace is a trace demo.
+
+config ROBIN_SLUB
+    bool "Robin Slub"
+    ---help---
+      Robin Slub test demo.
+      
+endif # if ROBIN
+
+endmenu
diff --git a/drivers/robin/Makefile b/drivers/robin/Makefile
new file mode 100644
index 00000000..1db9665
--- /dev/null
+++ b/drivers/robin/Makefile
@@ -0,0 +1,4 @@
+# SPDX-License-Identifier: GPL-2.0-only
+
+obj-$(CONFIG_ROBIN_TRACE)	+=	test_trace/
+obj-$(CONFIG_ROBIN_SLUB)	+=	slub_test/
diff --git a/drivers/robin/slub_test/Kconfig b/drivers/robin/slub_test/Kconfig
new file mode 100644
index 00000000..6d68b63
--- /dev/null
+++ b/drivers/robin/slub_test/Kconfig
@@ -0,0 +1,4 @@
+# SPDX-License-Identifier: GPL-2.0-only
+config ROBIN_SLUB
+    ---help---
+    This is slub test demo.
diff --git a/drivers/robin/slub_test/Makefile b/drivers/robin/slub_test/Makefile
new file mode 100644
index 00000000..e5ff9d1
--- /dev/null
+++ b/drivers/robin/slub_test/Makefile
@@ -0,0 +1,2 @@
+# SPDX-License-Identifier: GPL-2.0-only
+obj-$(CONFIG_ROBIN_SLUB)	+= slub_test.o
diff --git a/drivers/robin/slub_test/slub_test.c b/drivers/robin/slub_test/slub_test.c
new file mode 100644
index 00000000..cee436c
--- /dev/null
+++ b/drivers/robin/slub_test/slub_test.c
@@ -0,0 +1,31 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/slab.h>
+
+static char *buf;
+
+static void create_slub_error(void)
+{
+	buf = kmalloc(32, GFP_KERNEL);
+	if (buf) {
+		*buf = *(buf-1);
+        pr_info("%s: buf <%s>\n", __func__, *buf);
+	}
+	kfree(buf);
+}
+static int __init my_test_init(void)
+{
+	printk("robin: my module init\n");
+	create_slub_error();
+	return 0;
+}
+static void __exit my_test_exit(void)
+{
+	printk("goodbye robin slub\n");
+}
+fs_initcall(my_test_init);
+
+MODULE_LICENSE("GPL");
+module_init(my_test_init);
+module_exit(my_test_exit);
diff --git a/drivers/robin/test_trace/Kconfig b/drivers/robin/test_trace/Kconfig
new file mode 100644
index 00000000..e66477a
--- /dev/null
+++ b/drivers/robin/test_trace/Kconfig
@@ -0,0 +1,4 @@
+# SPDX-License-Identifier: GPL-2.0-only
+config ROBIN_TRACE
+    ---help---
+    This is a trace test demo.
diff --git a/drivers/robin/test_trace/Makefile b/drivers/robin/test_trace/Makefile
new file mode 100644
index 00000000..7ed2266
--- /dev/null
+++ b/drivers/robin/test_trace/Makefile
@@ -0,0 +1,2 @@
+# SPDX-License-Identifier: GPL-2.0-only
+obj-$(CONFIG_ROBIN_TRACE)   +=  test_trace.o
diff --git a/drivers/robin/test_trace/test_trace.c b/drivers/robin/test_trace/test_trace.c
new file mode 100644
index 00000000..63eff14
--- /dev/null
+++ b/drivers/robin/test_trace/test_trace.c
@@ -0,0 +1,104 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ *  drivers/robin/test_trace/test_trace.c
+ *
+ *  Copyright (C)  2020 Robin Jiang <jiangrenbin329@gmail.com>
+ */
+
+
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kthread.h>
+#include <linux/delay.h>
+#include <linux/slab.h>
+
+
+#include "test_trace.h"
+static struct task_struct *tsk[NR_CPUS];
+#define CREATE_TRACE_POINTS
+#include <trace/events/trace_test.h>
+
+static void show_reg(struct test_trace *trace)
+{
+	printk("show reg start ...\n");
+    
+    printk("trace->i = %d, trace->s = %s\n", trace->i, trace->s);
+}
+
+static void show_prio(void)
+{
+	struct task_struct *task = current;
+
+	printk("%s pid:%d, nice:%d prio:%d static_prio:%d normal_prio:%d\n",
+			task->comm, task->pid,
+			PRIO_TO_NICE(task->static_prio),
+			task->prio, task->static_prio,
+			task->normal_prio);
+}
+
+static void print_cpu(char *s)
+{
+	preempt_disable();
+	pr_info("%s cpu=%d.\n", s, smp_processor_id());
+	preempt_enable();
+}
+
+static int thread_fun(void *t)
+{
+    
+	do {
+		print_cpu("SLEEP in Thread Function ");
+		msleep_interruptible(2000);
+		print_cpu("msleep over in Thread Function");
+		print_cpu("running");
+		show_prio();
+	} while (!kthread_should_stop());
+	return 0;
+}
+
+static int __init my_init(struct test_trace *trace)
+{
+	int i;
+
+    trace = kmalloc(sizeof(struct test_trace), GFP_KERNEL);
+    if (!trace) 
+        return -ENOMEM;
+
+    trace->i = 0;
+    trace->s = "Robin";
+	print_cpu("Loading module");
+	for_each_online_cpu(i) {
+		tsk[i] = kthread_create(thread_fun, NULL, "kdemo/%d", i);
+		if (!tsk[i]) {
+			pr_info("Failed to generate a kernel thread\n");
+			return -1;
+		}
+		kthread_bind(tsk[i], i);
+		pr_info("About to wake up and run the thread for cpu=%d\n", i);
+		wake_up_process(tsk[i]);
+		pr_info("Staring thread for cpu %d", i);
+		print_cpu("on");
+        show_reg(trace);
+        trace_show_test_trace(trace);
+	}
+
+	return 0;
+}
+
+static void __exit my_exit(struct test_trace *trace)
+{   
+	int i;
+    kfree(trace);
+	for_each_online_cpu(i) {
+		pr_info(" Kill Thread %d", i);
+		kthread_stop(tsk[i]);
+		print_cpu("Kill was done on ");
+	}
+}
+fs_initcall(my_init);
+/* module_init(my_init);
+module_exit(my_exit);*/
+
+MODULE_AUTHOR("Robin Jiang <jiangrenbin329@gmail.com>");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/robin/test_trace/test_trace.h b/drivers/robin/test_trace/test_trace.h
new file mode 100644
index 00000000..4e6cb52
--- /dev/null
+++ b/drivers/robin/test_trace/test_trace.h
@@ -0,0 +1,11 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef TEST_TRACE_H
+#define TEST_TRACE_H
+struct test_trace
+{
+    int i;
+    unsigned int m;
+    char *s;
+};
+
+#endif /* TEST_TRACE_H */
diff --git a/drivers/tty/serial/serial_core.c b/drivers/tty/serial/serial_core.c
index 4223cb4..c49b837 100644
--- a/drivers/tty/serial/serial_core.c
+++ b/drivers/tty/serial/serial_core.c
@@ -464,7 +464,7 @@ static void uart_shutdown(struct tty_struct *tty, struct uart_state *state)
 		}
 	}
 	/* Should never happen */
-	WARN_ON(1);
+	/* WARN_ON(1); */
 	return 0;
 }
 
diff --git a/include/trace/events/trace_test.h b/include/trace/events/trace_test.h
new file mode 100644
index 00000000..0090552
--- /dev/null
+++ b/include/trace/events/trace_test.h
@@ -0,0 +1,41 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Reference linux-stable/samples/trace_events/trace-events-sample.h
+ *  
+ * Notice that TRACE_SYSTEM should be defined outside of #if
+ * protection, just like TRACE_INCLUDE_FILE.
+ */
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM trace_test
+
+#if !defined(_TRACE_TRACE_TEST_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_TRACE_TEST_H
+
+#include <linux/tracepoint.h>
+
+TRACE_EVENT(show_test_trace,
+
+    TP_PROTO(struct test_trace *trace),
+
+    TP_ARGS(trace),
+
+    TP_STRUCT__entry(
+        __field( void *,    trace   )
+        __field( unsigned int, i)
+        __string( s, trace->s)
+    ),
+
+    TP_fast_assign(
+        __entry->trace      = trace;
+        __entry->i          = trace->i;
+        __assign_str(s, trace->s);
+    ),
+
+    TP_printk("trace struct=%pR i-->%d s-->%s",
+         __entry->trace, __entry->i, __get_str(s))
+
+
+);
+
+#endif /* _TRACE_TRACE_TEST_H */
+
+#include <trace/define_trace.h>
diff --git a/init/main.c b/init/main.c
index 96f8d5a..3b6a3e1 100644
--- a/init/main.c
+++ b/init/main.c
@@ -509,7 +509,7 @@ void __init __weak poking_init(void) { }
 
 void __init __weak pgd_cache_init(void) { }
 
-bool initcall_debug;
+bool initcall_debug = 1;
 core_param(initcall_debug, initcall_debug, bool, 0644);
 
 #ifdef TRACEPOINTS_ENABLED
-- 
1.9.1

