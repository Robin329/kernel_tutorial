$date
	Wed Jun 26 12:16:20 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb $end
$var wire 5 ! od [4:0] $end
$var reg 1 " clk $end
$var reg 1 # rst_n $end
$var integer 32 $ fd [31:0] $end
$var reg 32 % result [31:0] $end
$scope function crc32 $end
$var reg 1 & bit0 $end
$var reg 1 ' bit1 $end
$var reg 1 ( bit10 $end
$var reg 1 ) bit11 $end
$var reg 1 * bit12 $end
$var reg 1 + bit16 $end
$var reg 1 , bit2 $end
$var reg 1 - bit22 $end
$var reg 1 . bit23 $end
$var reg 1 / bit26 $end
$var reg 1 0 bit4 $end
$var reg 1 1 bit5 $end
$var reg 1 2 bit7 $end
$var reg 1 3 bit8 $end
$var reg 8313 4 bit_stream [8312:0] $end
$var reg 32 5 bitmapped_crc [31:0] $end
$var reg 32 6 crc [31:0] $end
$var reg 1 7 enable $end
$var reg 32 8 i_crc [31:0] $end
$var integer 32 9 ix [31:0] $end
$var integer 32 : number_of_56bitswords [31:0] $end
$var integer 32 ; number_of_bits [31:0] $end
$upscope $end
$scope module crc32_sim $end
$var wire 1 " clk $end
$var wire 1 # rst_n $end
$var reg 5 < ocnt [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx <
b100011000000 ;
b101000 :
b100000 9
b11110010100010100001001100100011 8
17
b1101011101011110110011011100 6
b11000100110010000101000101001111 5
b
03
12
01
10
1/
0.
1-
1,
1+
0*
1)
1(
0'
0&
b1101011101011110110011011100 %
b10000000000000000000000000000011 $
x#
x"
bx !
$end
